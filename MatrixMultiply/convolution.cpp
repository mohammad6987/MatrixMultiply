#include <iostream>
#include <chrono>


/*void visualizeMatrix(const int matrix[5][5]) {
    // Create a blank image
    cv::Mat image(5, 5, CV_8UC3);

    // Assign color codes based on the matrix values
    for (int i = 0; i < image.rows; ++i) {
        for (int j = 0; j < image.cols; ++j) {
            int value = matrix[i][j];

            // Map the matrix value to a color
            cv::Scalar color(value, value, value);  // Grayscale colors

            // Set the pixel color in the image
            image.at<cv::Vec3b>(i, j) = color;
        }
    }

    // Display the image
    cv::imshow("Matrix Visualization", image);
    cv::waitKey(0);
}*/
const int matrixSize = 32;
const int kernelSize = 3;

// Function to do the convolution on matrix
void convolution(const float matrix[matrixSize][matrixSize], const float kernel[kernelSize][kernelSize], float result[matrixSize][matrixSize]) {
    // Iterate through each element in the matrix
    for (int i = 0; i < matrixSize; ++i) {
        for (int j = 0; j < matrixSize; ++j) {
            result[i][j] = 0.0;

            // Iterate through each element in the kernel
            for (int ki = 0; ki < kernelSize; ++ki) {
                for (int kj = 0; kj < kernelSize; ++kj) {
                    // Check boundaries to avoid accessing out-of-bounds elements
                    int mi = i - kernelSize / 2 + ki;
                    int mj = j - kernelSize / 2 + kj;

                    // Perform convolution, considering zero-padding for out-of-bounds elements
                    if (mi >= 0 && mi < matrixSize && mj >= 0 && mj < matrixSize) {
                        result[i][j] += matrix[mi][mj] * kernel[ki][kj];
                    }
                }
            }
        }
    }
}


int main() {
    // Example matrices and kernel
    const float matrix[matrixSize][matrixSize] = {
            {2, 123, 98, 187, 54, 23, 176, 92,2,189, 32, 145, 11, 75, 198, 43, 108,189, 32, 145, 11, 75, 198, 43, 10, 123, 98, 187, 54, 23, 176, 92},
            {189, 189, 32, 145, 11, 75, 198, 43, 108,189, 32, 145, 11, 75, 198, 43, 10,32, 145, 11, 75, 198, 43, 108,189, 32, 145, 11, 75, 198, 43, 10},
            {67, 199, 55, 134, 23, 167, 88, 11,67,189, 32, 145, 11, 75, 198, 43, 108,189, 32, 145, 11, 75, 198, 43, 10, 199, 55, 134, 23, 167, 88, 112},
            {189, 32, 145, 11, 75, 198, 43, 108,189, 32, 145, 11, 75, 198, 43, 10,43, 87,43, 87, 150, 4, 189, 22, 56, 178, 150, 4, 189, 22, 56, 178},
            {92, 189, 107, 67, 45,43, 87, 150, 4, 189, 22, 56, 178, 3,189, 32, 145, 11, 75, 198, 43, 108,189, 32, 145, 11, 75, 198, 43, 10, 144, 78},
            {156, 32, 19, 101, 89, 176, 12,43, 87, 150, 4, 189,189, 32, 145, 11, 75, 198, 43, 108,189, 32, 145, 11, 75, 198, 43, 10, 22, 56, 178, 194},
            {33, 127, 4, 80,33, 127, 4, 80, 123, 56, 99, 187, 123, 56, 99,189, 32, 145, 11, 75, 198, 43, 108,189, 32, 145, 11, 75, 198, 43, 10, 187},
            {189, 65, 177, 43,189,189, 32, 145, 11, 75, 198, 43, 108,189, 32, 145, 11, 75, 198, 43, 10, 65, 177, 43, 124, 7, 199, 88, 124, 7, 199, 88},
            {2, 123, 98, 187,2, 123, 98, 187, 54, 23, 176, 92,2, 123, 98, 187, 54, 23, 176, 92, 54, 23, 176, 92,2, 123, 98, 187, 54, 23, 176, 92},
            {189, 32, 145, 11, 75, 198, 43, 108,2, 123, 98, 187, 54, 23, 176, 92,2, 123, 98, 187, 54, 23, 176, 92,189, 32, 145, 11, 75, 198, 43, 10},
            {67, 199, 55, 134, 23, 167, 88, 11,67, 199, 55, 134, 23,2, 123, 98, 187, 54, 23, 176, 92,2, 123, 98, 187, 54, 23, 176, 92, 167, 88, 112},
            {43, 87,43, 87, 150, 4, 189, 22, 56, 178, 150, 4, 189, 22, 56, 178,2, 123, 98, 187, 54, 23, 176, 92,2, 123, 98, 187, 54, 23, 176, 92},
            {92, 189,2, 123, 98, 187, 54, 23, 176, 92,2, 123, 98, 187, 54, 23, 176, 92, 107, 67, 45,43, 87, 150, 4, 189, 22, 56, 178, 3, 144, 78},
            {156, 32, 19, 101, 89, 176, 12,43, 87, 150,33, 127, 4, 80,33, 127, 4, 80, 123, 56, 99, 187, 123, 56, 99, 187, 4, 189, 22, 56, 178, 194},
            {33, 127, 4, 80,33, 127, 4, 80, 123, 56,33, 127, 4, 80,33, 127, 4, 80, 123, 56, 99, 187, 123, 56, 99, 187, 99, 187, 123, 56, 99, 187},
            {189, 65, 177, 43,33, 127, 4, 80,33, 127, 4, 80, 123, 56, 99, 187, 123, 56, 99, 187,189, 65, 177, 43, 124, 7, 199, 88, 124, 7, 199, 88},
            {2, 123, 98, 187, 54, 23, 176, 92,2,33, 127, 4, 80,33, 127, 4, 80, 123, 56, 99, 187, 123, 56, 99, 187, 123, 98, 187, 54, 23, 176, 92},
            {189, 32, 145, 11, 75, 198, 43, 108,189, 32,33, 127, 4, 80,33, 127, 4, 80, 123, 56, 99, 187, 123, 56, 99, 187, 145, 11, 75, 198, 43, 10},
            {67, 199, 55, 134, 23, 167, 88,2, 123, 98, 187, 54, 23, 176, 92,2, 123, 98, 187, 54, 23, 176, 92, 11,67, 199, 55, 134, 23, 167, 88, 112},
            {43, 87,43, 87,2, 123, 98, 187, 54, 23, 176, 92,2, 123, 98, 187, 54, 23, 176, 92, 150, 4, 189, 22, 56, 178, 150, 4, 189, 22, 56, 178},
            {92, 189, 107, 67, 45,43, 87, 150, 4, 189,2, 123, 98, 187, 54, 23, 176, 92,2, 123, 98, 187, 54, 23, 176, 92, 22, 56, 178, 3, 144, 78},
            {156, 32,2, 123, 98, 187, 54, 23, 176, 92,2, 123, 98, 187, 54, 23, 176, 92, 19, 101, 89, 176, 12,43, 87, 150, 4, 189, 22, 56, 178, 194},
            {33, 127, 4,2, 123, 98, 187, 54, 23, 176, 92,2, 123, 98, 187, 54, 23, 176, 92, 80,33, 127, 4, 80, 123, 56, 99, 187, 123, 56, 99, 187},
            {189, 65, 177, 43,189, 65, 177, 43, 124, 7, 199,2, 123, 98, 187, 54, 23, 176, 92,2, 123, 98, 187, 54, 23, 176, 92, 88, 124, 7, 199, 88},
            {2, 123, 98, 187, 54, 23, 176, 92,2, 123, 98, 187, 54, 23, 176,2, 123, 98, 187, 54, 23, 176, 92,2, 123, 98, 187, 54, 23, 176, 92, 92},
            {189, 32, 145, 11, 75, 198,2, 123, 98, 187, 54, 23, 176, 92,2, 123, 98, 187, 54, 23, 176, 92, 43, 108,189, 32, 145, 11, 75, 198, 43, 10},
            {67, 199, 55, 134, 23, 167,2, 123, 98, 187, 54, 23, 176, 92,2, 123, 98, 187, 54, 23, 176, 92, 88, 11,67, 199, 55, 134, 23, 167, 88, 112},
            {43, 87,43, 87,43, 87,43, 87, 150, 4, 189, 22, 56, 178, 150, 4, 189, 22, 56, 178, 150, 4, 189, 22, 56, 178, 150, 4, 189, 22, 56, 178},
            {92, 189, 107, 67, 45,43, 87, 150, 4,43, 87,43, 87, 150, 4, 189, 22, 56, 178, 150, 4, 189, 22, 56, 178, 189, 22, 56, 178, 3, 144, 78},
            {156, 32, 19, 101, 89, 176, 12,43, 87, 150,43, 87,43, 87, 150, 4, 189, 22, 56, 178, 150, 4, 189, 22, 56, 178, 4, 189, 22, 56, 178, 194},
            {33, 127, 4, 80,33, 127,43, 87,43, 87, 150, 4, 189, 22, 56, 178, 150, 4, 189, 22, 56, 178, 4, 80, 123, 56, 99, 187, 123, 56, 99, 187},
            {189, 65,43, 87,43, 87, 150, 4, 189, 22, 56, 178, 150, 4, 189, 22, 56, 178, 177, 43,189, 65, 177, 43, 124, 7, 199, 88, 124, 7, 199, 88}
             };

    const float kernel[kernelSize][kernelSize] = {
            {1, 1, 1},
            {1, 1, 1},
            {1, 1, 1}
    };

    // Result matrix
    float result[matrixSize][matrixSize];
    auto start = std::chrono::high_resolution_clock::now();
    // Perform convolution
    for(int i=3;i>0;i--)
    convolution(matrix, kernel, result);
    auto stop  = std::chrono::high_resolution_clock::now();
    auto duration = std::chrono::duration_cast<std::chrono::nanoseconds >(stop -start);
    printf("%d ns \n" , duration.count());
    // Print the result
    for (int i = 0; i < matrixSize; ++i) {
        for (int j = 0; j < matrixSize; ++j) {
            std::cout << result[i][j] << " ";
        }
        std::cout << std::endl;
    }

    return 0;
}